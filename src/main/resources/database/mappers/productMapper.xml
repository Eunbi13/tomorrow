<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.tmh.t1.product.ProductMapper">
    	<!-- eb_productUpdate 상품 업데이트 -->
    	<update id="setUpdateProduct" parameterType="ProductVO">
    		UPDATE product 
    		SET productName=#{productName},
    			productPrice=#{productPrice},
    			productPic=#{productPic},
    			contents=#{contents},
    			discountPrice=#{discountPrice},
    			shippingFee=#{shippingFee}
    			WHERE productNum=#{productNum}
    	</update>
    	<!-- eb_productUpdate 상품의 카테고리 중간 테이블(product_category)에 업데이트 -->
		<update id="setUpdateProduct_category" parameterType="java.util.Map">
			UPDATE product_category SET categoryID=#{categoryID} WHERE productNum=#{productNum}
		</update>	
    	<!-- eb_productUpdate 상품의 옵션 중간 테이블(product_options)에 업데이트 -->
    	<!-- <update id="setUpdateProduct_Options" parameterType="java.util.Map">
    		
    	</update> -->
    	<!-- eb_productUpdate image삭제 -->
    	
    
    	<!-- eb_productUpdate 상품정보 불러오기 -->
    	<select id="getProdInfo" parameterType="ProductVO" resultMap="result">
    		SELECT P.*, Pimg.* FROM product P 
    		left JOIN productimages pimg 
    		ON p.productNum=Pimg.productNum 
    		WHERE p.productNum=${productNum}
    	</select>
    	<resultMap type="ProductVO" id="result">
    		<id column="productNum" property="productNum"/>
    		<result column="brandNum" property="brandNum"/>
    		<result column="productName" property="productName"/>
    		<result column="productPrice" property="productPrice"/>
    		<result column="productPic" property="productPic"/>
    		<result column="contents" property="contents"/>
    		<result column="discountPrice" property="discountPrice"/>
    		<result column="shippingFee" property="shippingFee"/>
    		<collection property="images" javaType="java.util.List" ofType="ProductImagesVO">
    			<id column="num" property="num"/>
    			<result column="productNum" property="productNum"/>
    			<result column="fileName" property="fileName"/>
    		</collection>
    	</resultMap>
    
		<!-- eb_productInsert 유저네임에서 브랜드번호 찾기-->
    	<select id="getBrandNum" parameterType="java.lang.String" resultType="java.lang.Long">
    		SELECT brandNum FROM brand WHERE username=#{username}
    	</select> 
    	
    	<!-- eb_ProductInsert -->
    	<insert id="setProduct" parameterType="ProductVO" useGeneratedKeys="true" keyProperty="productNum">
			INSERT INTO product (brandNum, productPic, contents, 
								 productName, productPrice, discountPrice, shippingFee) 
			VALUES (#{brandNum},#{productPic},#{contents},
					#{productName},#{productPrice},#{discountPrice},#{shippingFee})
    	</insert>
    	<!-- eb_ProductInsert 추가이미지 넣기 -->
    	<insert id="setImages" parameterType="ProductImagesVO">
			INSERT INTO productimages (productNum, fileName) VALUES (#{productNum}, #{fileName})
		</insert>
		<!-- eb_ProductInsert 상품의 카테고리 중간 테이블(product_category)에 삽입 -->
		<insert id="setProduct_category" parameterType="java.util.Map">
			INSERT INTO product_category VALUES (#{productNum}, #{categoryID})
		</insert>
		<!-- eb_ProductInsert 상품의 옵션 중간 테이블(product_options)에 삽입 -->
		<insert id="setProduct_Options" parameterType="java.util.Map">
			INSERT INTO product_options VALUES (#{productNum}, #{optionNum})
		</insert>
		
		<!-- eb_brandHome 브랜드상품리스트 시간순으로 출력-->
		<select id="getBrandHomeList" parameterType="java.lang.Long" resultType="ProductVO">
			SELECT * FROM product WHERE brandNum=#{brandNum}  GROUP BY productNum DESC
		</select>
		
		<!-- eb category클릭하면 해당상품뜨는 메서드 -->
		<!-- 카테고리ID를 기준으로 함. 대분류 카테고리ID가 14번까지 있음 고려해서 if문 사용 -->
		<!-- brandNum은 brnadHome에서 카테고리 선택할 경우를 위해 if문 추가 -->
		<select id="getProdFromCat" parameterType="java.util.Map" resultType="ProductVO">
			SELECT p.* FROM  product_category PC
			JOIN (SELECT c.* FROM category C,(SELECT * FROM category WHERE categoryID=#{categoryID})C2
					WHERE c.groupID=c2.groupID
					<if test="categoryID>14">
						AND c2.category_detail_LEV=c.category_detail_parent
					</if>
				  ) C3
			ON pc.categoryID=c3.categoryID
			JOIN product P
			ON p.productNum=PC.productNum
			<if test="brandNum!=null">
				WHERE p.brandNum=#{brandNum}
			</if>
			GROUP BY p.productNum DESC 
		</select>	
	
		
		<select id="getPList" parameterType="BrandVO" resultType="ProductVO">
			SELECT P.* FROM product P, (SELECT * FROM brand WHERE username=#{username} or brandNum=#{brandNum}) B 
			WHERE P.brandNum=B.brandNum GROUP BY productNum DESC
		</select>
		
		
		
		
		
		
    <!-- 장은 -->
    	<select id="getProductList" parameterType="ProductVO" resultMap="ProductVO">
    		SELECT p.*, b.*
			FROM product p INNER JOIN brand b 
			ON p.brandNum = b.brandNum
    	</select>
    	
    	<resultMap type="BrandVO" id="brandVO">
    		<id column="brandNum" property="brandNum"/>
    		<result column="username" property="username" />
    		<result column="companyName" property="companyName"/>
    		<result column="registrationNum" property="registrationNum"/>
    		<result column="companyHomepage" property="companyHomepage"/>
    		<result column="managerName" property="managerName"/>
    		<result column="managerPhone" property="managerPhone"/>
    		<result column="managerEmail" property="managerEmail"/>
    		<result column="brandName" property="brandName"/>
    		<result column="brandIntro" property="brandIntro"/>
    		<result column="referenceFile" property="referenceFile"/>
    		<result column="accept" property="accept"/>
    	</resultMap>
    
    	
    	<resultMap type="ProductVO" id="ProductVO">
			<id column="productNum" property="productNum"/>
			<result column="brandNum" property="brandNum"/>
			<result column="productName" property="productName"/>
			<result column="productPrice" property="productPrice"/>
			<result column="productPic" property="productPic"/>
			<result column="contents" property="contents"/>
			<result column="discountPrice" property="discountPrice"/>
			<result column="shippingFee" property="shippingFee"/>
			<collection property="brandVO" resultMap="brandVO"/>
			<collection property="optionsVOs" javaType="java.util.List" ofType="OptionsVO">
				<id column="optionNum" property="optionNum"/>
				<result column="productNum" property="productNum"/>
				<result column="optionKinds" property="optionKinds"/>
				<result column="optionName" property="optionName"/>
				<result column="optionPrice" property="optionPrice"/>
				<result column="step" property="step"/>
			</collection>
		</resultMap>
		
	
    	
    	<select id="getBrandList" parameterType="ProductVO" resultType="BrandVO">
    		select brandName from brand
			where brandNum IN (SELECT brandNum FROM product WHERE productNum=#{productNum})
    	</select>
    	
    	<select id="getOptionsList" parameterType="ProductVO" resultType="OptionsVO">
    		SELECT * from options
			where optionNum IN (SELECT optionNum FROM product_options WHERE productNum=#{productNum})
    	</select>
    	
    	  	
    
    	<select id="getSelect" parameterType="ProductVO" resultMap="ProductVO">
    		SELECT p.*, o.*, po.productNum, b.brandName
			FROM 
			options o INNER JOIN product_options po
			ON o.optionNum = po.optionNum
			INNER JOIN product p
			ON po.productNum = p.productNum
			INNER JOIN brand b
			ON p.brandNum = b.brandNum
			WHERE p.productNum=#{productNum}
    	</select>
    
    
    </mapper>